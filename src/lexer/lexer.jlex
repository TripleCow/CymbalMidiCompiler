/* 
 * lexer.jlex
 * Edited by Terrence Tan, Harry Bartlett, Tyler Harley
 * Last Edit: 02/17/2014
 * Added %eofval cases
 * Added multiple regular expression rules and 3 states
 *
 */

/* Bantam Java Compiler and Language Toolset.

   Copyright (C) 2009 by Marc Corliss (corliss@hws.edu) and 
                         David Furcy (furcyd@uwosh.edu) and
                         E Christopher Lewis (lewis@vmware.com).
   ALL RIGHTS RESERVED.

   The Bantam Java toolset is distributed under the following 
   conditions:

     You may make copies of the toolset for your own use and 
     modify those copies.

     All copies of the toolset must retain the author names and 
     copyright notice.

     You may not sell the toolset or distribute it in 
     conjunction with a commerical product or service without 
     the expressed written consent of the authors.

   THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS 
   OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE 
   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
   PARTICULAR PURPOSE. 
*/

/* code below is copied to the file containing the lexer */

package lexer;

import parser.TokenIds;

/* import Symbol class, which represents the symbols that are passed
   from the lexer to the parser.  Each symbol consists of an ID 
   and a token value, which is defined in Token.java */
import java_cup.runtime.Symbol;

%%

%{
    /* code below is copied to the class containing the lexer */

    /** maximum string size allowed */
    private final int MAX_STRING_SIZE = 5000;
    /** boolean indicating whether debugging is enabled */
    private boolean debug = false;
    /** boolean indicating whether we're lexing multiple files or a single file */
    private boolean multipleFiles = false;
    /** array that holds the names of each file we're lexing 
      * (used only when multipleFiles is true)
      * */
    private String[] filenames;
    /** array that holds the reader for each file we're lexing 
      * (used only when multipleFiles is true)
      * */
    private java.io.BufferedReader[] fileReaders;
    /** current file number used to index filenames and fileReaders
      * (used only when multipleFiles is true)
      * */
    private int fileCnt = 0;


    /** Lexer constructor - defined in JLex specification file
      * Needed to handle lexing multiple files
      * @param filenames list of filename strings
      * @param debug boolean indicating whether debugging is enabled
      * */
    public Lexer(String[] filenames, boolean debug) {
	// call private constructor, which does some initialization
	this();

	this.debug = debug;

	// set the multipleFiles flag to true (provides compatibility
	// with the single file constructors)
	multipleFiles = true;

	// initialize filenames field to parameter filenames
	// used later for finding the name of the current file
	this.filenames = filenames;

	// check that there is at least one specified filename
	if (filenames.length == 0)
	    throw new RuntimeException("Must specify at least one filename to scan");

	// must initialize readers for each file (BufferedReader)
	fileReaders = new java.io.BufferedReader[filenames.length];
	for (int i = 0; i < filenames.length; i++) {
	    // try...catch checks if file is found
	    try {
		// create the ith file reader
		fileReaders[i] = new java.io.BufferedReader(new java.io.FileReader(filenames[i]));
	    }
	    catch(java.io.FileNotFoundException e) {
		// if file not found then report an error and exit
		System.err.println("Error: file '" + filenames[i] + "' not found");
		System.exit(1);
	    }
	}

	// set yy_reader (a JLex variable) to the first file reader
	yy_reader = fileReaders[0];

	// set yyline to 1 (as opposed to 0)
	yyline = 1;
    }

    /** holds the current string constant
      * note: we use StringBuffer so that appending does not require constructing a new object 
      * */
    private StringBuffer currStringConst;

    /** getter method for accessing the current line number
      * @return current line number
      * */
    public int getCurrLineNum() {
	return yyline;
    }

    /** getter method for accessing the current file name
      * @return current filename string
      * */
    public String getCurrFilename() {
	return filenames[fileCnt];
    }

    /** print tokens - used primarily for debugging the lexer 
      * */
    public void printTokens() throws java.io.IOException {
	// prevFileCnt is used to determine when the filename has changed
	// every time an EOF is encountered fileCnt is incremented
	// by testing fileCnt with prevFileCnt, we can determine when the
	// filename has changed and print the filename along with the tokens
	int prevFileCnt = -1;

	// try...catch needed since next_token() can throw an IOException
	try {
	    // iterate through all tokens
	    while (true) {
		// get the next token
		Symbol symbol = next_token();
		// check if file has changed
		if (prevFileCnt != fileCnt) {
		    // if it has then print out the new filename
		    System.out.println("# " + filenames[fileCnt]);
		    // update prevFileCnt
		    prevFileCnt = fileCnt;
		}
		// print out the token
		System.out.println((Token)symbol.value);
		// if we've reached the EOF (EOF only returned for the last
		// file) then we break out of loop
		if (symbol.sym == TokenIds.EOF)
		    break;
	    }
	}
	catch (java.io.IOException e) {
	    // if an IOException occurs then print error and exit
	    System.err.println("Unexpected IO exception while scanning.");
	    throw e;
	}
    }
%}

%init{
    // set yyline to 1 (as opposed to 0)
    yyline = 1;
%init}

%eofval{
    /* code below is executed when the end-of-file is reached */

    switch(yy_lexical_state) {
    case YYINITIAL:
	// if in YYINITIAL when EOF occurs then no error
	break;

    case YYMLCOMMENT:
        //if in YYMLCOMMENT when EOF occurs, then we have an unterminated
        //multi-line comment and we return an error
        yybegin(YYINITIAL);
        return new Symbol(TokenIds.LEX_ERROR, new Token("LEX_ERROR", "Unterminated multi-line comment", yyline));



    // if defining other states then might want to add other cases here...
    }

    

    // if we reach here then we should either start lexing the next
    // file (if there are more files to lex) or return EOF (if we're
    // at the file)
    if (multipleFiles && fileCnt < fileReaders.length - 1) {
	// more files to lex so update yy_reader and yyline and then continue
	yy_reader = fileReaders[++fileCnt];
	yyline = 1;
	continue;
    }

    // if we reach here, then we're at the last file so we return EOF
    // to parser
    return new Symbol(TokenIds.EOF, new Token("EOF", yyline));
%eofval}

%cup
%public
%class Lexer
%line
%char
%state YYINSTRING, YYSTR_ESCAPE, YYMLCOMMENT

%%

<YYINITIAL>[ \t\n\r\f]+   {}

<YYINITIAL>//.*         { }

<YYINITIAL>/\*  {yybegin(YYMLCOMMENT);}

<YYMLCOMMENT>\*/  {yybegin(YYINITIAL);}



<YYMLCOMMENT>(.|\n|\r|\t|\f) {}


<YYINITIAL>Song        { return new Symbol(TokenIds.SONG, 
						    new Token("SONG", yyline)); }
						 
						 
<YYINITIAL>Phrase        { return new Symbol(TokenIds.PHRASE, 
						    new Token("PHRASE", yyline)); }
<YYINITIAL>Octave		 { return new Symbol(TokenIds.OCTAVE,
							new Token("OCTAVE", yyline)); }
<YYINITIAL>Repeat		 { return new Symbol(TokenIds.REPEAT,
							new Token("REPEAT", yyline)); }	
<YYINITIAL>Volume		 { return new Symbol(TokenIds.VOLUME,
							new Token("VOLUME", yyline)); }
							
<YYINITIAL>Tempo		 { return new Symbol(TokenIds.TEMPO,
							new Token("TEMPO", yyline)); }
							
<YYINITIAL>Instrument    { return new Symbol(TokenIds.INSTRUMENT,
							new Token("INSTRUMENT",yyline));}	
										
							
<YYINITIAL>piano|mesopiano|default|mesoforte|forte	 { return new Symbol(TokenIds.VOLUMEWORD, 
						    new Token("VOLUMEWORD", yytext(), yyline)); }

												                      
<YYINITIAL>[A-G]       { return new Symbol(TokenIds.NOTE, 
						    new Token("NOTE", yytext(), yyline)); }						                      

<YYINITIAL>[6-9][0-9]|1[0-2][0-9]        { return new Symbol(TokenIds.TEMPOINTCONST, 
						    new Token("TEMPOINTCONST", yytext(), yyline)); }
					                      
<YYINITIAL>[0-7]        { return new Symbol(TokenIds.OCTAVEINTCONST, 
						    new Token("OCTAVEINTCONST", yytext(), yyline)); }
						    

						    							   		
<YYINITIAL>#|b        { return new Symbol(TokenIds.ACCIDENTAL, 
						    new Token("ACCIDENTAL", yytext() ,yyline)); }			
						    
<YYINITIAL>\+|\-        { return new Symbol(TokenIds.OCTAVEMODVAL, 
						    new Token("OCTAVEMODVAL", yytext(), yyline)); }			
						    
<YYINITIAL>Rest        { return new Symbol(TokenIds.REST, 
						    new Token("REST", yytext(), yyline)); }							    

<YYINITIAL>\(           { return new Symbol(TokenIds.LPAREN, 
						    new Token("LPAREN", "(", yyline)); }

<YYINITIAL>\)           { return new Symbol(TokenIds.RPAREN,
                                                    new Token("RPAREN", ")", yyline)); }
                            
<YYINITIAL>\{           { return new Symbol(TokenIds.LBRACE,
                                                    new Token("LBRACE", "{", yyline)); }

<YYINITIAL>\}           { return new Symbol(TokenIds.RBRACE,
                                                    new Token("RBRACE", "}", yyline)); }						    
						    
<YYINITIAL>Quarter|Half|Whole|Eighth       { return new Symbol(TokenIds.LENGTH, 
												    new Token("LENGTH", yytext(), yyline)); }	

<YYINITIAL>\"           { currStringConst = new StringBuffer();
                          yybegin(YYINSTRING); }

<YYINSTRING>\\          { yybegin(YYSTR_ESCAPE);}

<YYSTR_ESCAPE>[ntf\\\"] { currStringConst.append("\\"+yytext());
                           yybegin(YYINSTRING);}

<YYSTR_ESCAPE>[^ntf\\\"] { yybegin(YYINSTRING);
                            return new Symbol(TokenIds.LEX_ERROR, 
						    new Token("LEX_ERROR", "Unrecognized escape character in string", yyline)); }



<YYINSTRING>\"          { yybegin(YYINITIAL);
                          if(currStringConst.length() > 5000){
                              return new Symbol(TokenIds.LEX_ERROR, 
						    new Token("LEX_ERROR", "String too long",yyline));
                          }
                          return new Symbol(TokenIds.STRING_CONST, 
						    new Token("STRING_CONST", currStringConst.toString() , yyline));}

<YYINSTRING>\n           { yybegin(YYINITIAL);
                            return new Symbol(TokenIds.LEX_ERROR, 
						    new Token("LEX_ERROR", "Unterminated or Multi-line string", yyline)); }

<YYINSTRING>.          {currStringConst.append(yytext());}

<YYINITIAL>[8-59]|[122-] { return new Symbol(TokenIds.LEX_ERROR, 
						    new Token("LEX_ERROR", ("Unrecognized character: " + yytext()), yyline)); } 

<YYINITIAL>[^A-G1-8\+\-\(\)\{\} \t\n\r\f] { return new Symbol(TokenIds.LEX_ERROR, 
						    new Token("LEX_ERROR", ("Unrecognized character: " + yytext()), yyline)); }     

.                       { throw new RuntimeException("Unmatched lexeme " +
                            yytext() + " at line " + yyline); }
