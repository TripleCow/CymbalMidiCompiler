
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri May 09 11:42:34 EDT 2014
//----------------------------------------------------

package parser;

import lexer.*;
import ast.*;
import util.ErrorHandler;
import java_cup.runtime.Symbol;

/** CUP v0.10k generated parser.
  * @version Fri May 09 11:42:34 EDT 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\004\004\000\002\002\004\000\002\004" +
    "\003\000\002\003\010\000\002\005\003\000\002\005\004" +
    "\000\002\006\007\000\002\011\003\000\002\011\004\000" +
    "\002\010\003\000\002\010\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\012\007\000\002\024\006\000\002\025\007" +
    "\000\002\026\007\000\002\027\007\000\002\030\003\000" +
    "\002\013\003\000\002\013\003\000\002\016\005\000\002" +
    "\016\005\000\002\016\006\000\002\016\004\000\002\014" +
    "\003\000\002\014\003\000\002\017\003\000\002\020\003" +
    "\000\002\015\003\000\002\015\003\000\002\021\003\000" +
    "\002\007\005\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\006\005\006\006\011\001\002\000\006\005" +
    "\ufffd\006\ufffd\001\002\000\006\005\006\006\011\001\002" +
    "\000\004\030\103\001\002\000\004\002\102\001\002\000" +
    "\004\002\uffff\001\002\000\004\030\012\001\002\000\004" +
    "\016\013\001\002\000\020\010\020\012\031\020\035\022" +
    "\023\023\022\024\024\030\014\001\002\000\006\014\uffdd" +
    "\016\uffdd\001\002\000\022\010\ufff4\012\ufff4\017\ufff4\020" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\030\ufff4\001\002\000\022" +
    "\010\ufffa\012\ufffa\017\ufffa\020\ufffa\022\ufffa\023\ufffa\024" +
    "\ufffa\030\ufffa\001\002\000\022\010\uffea\012\uffea\017\uffea" +
    "\020\uffea\022\uffea\023\uffea\024\uffea\030\uffea\001\002\000" +
    "\006\025\054\026\051\001\002\000\022\010\ufff8\012\ufff8" +
    "\017\ufff8\020\ufff8\022\ufff8\023\ufff8\024\ufff8\030\ufff8\001" +
    "\002\000\004\030\014\001\002\000\004\027\066\001\002" +
    "\000\004\031\061\001\002\000\022\010\020\012\031\017" +
    "\060\020\035\022\023\023\022\024\024\030\014\001\002" +
    "\000\022\010\ufff6\012\ufff6\017\ufff6\020\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\030\ufff6\001\002\000\022\010\ufff3\012\ufff3" +
    "\017\ufff3\020\ufff3\022\ufff3\023\ufff3\024\ufff3\030\ufff3\001" +
    "\002\000\022\010\uffeb\012\uffeb\017\uffeb\020\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\030\uffeb\001\002\000\006\007\047\011" +
    "\046\001\002\000\004\014\043\001\002\000\022\010\ufff5" +
    "\012\ufff5\017\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\030" +
    "\ufff5\001\002\000\022\010\ufff7\012\ufff7\017\ufff7\020\ufff7" +
    "\022\ufff7\023\ufff7\024\ufff7\030\ufff7\001\002\000\004\016" +
    "\037\001\002\000\022\010\ufff2\012\ufff2\017\ufff2\020\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\030\ufff2\001\002\000\020\010" +
    "\020\012\031\020\035\022\023\023\022\024\024\030\014" +
    "\001\002\000\022\010\020\012\031\017\042\020\035\022" +
    "\023\023\022\024\024\030\014\001\002\000\022\010\ufff9" +
    "\012\ufff9\017\ufff9\020\ufff9\022\ufff9\023\ufff9\024\ufff9\030" +
    "\ufff9\001\002\000\022\010\ufff0\012\ufff0\017\ufff0\020\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\030\ufff0\001\002\000\004\015" +
    "\044\001\002\000\022\010\uffde\012\uffde\017\uffde\020\uffde" +
    "\022\uffde\023\uffde\024\uffde\030\uffde\001\002\000\030\010" +
    "\uffe6\012\uffe6\013\053\017\uffe6\020\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\054\026\051\030\uffe6\001\002\000\030\010" +
    "\uffe0\012\uffe0\013\uffe0\017\uffe0\020\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\030\uffe0\001\002\000\030\010" +
    "\uffe1\012\uffe1\013\uffe1\017\uffe1\020\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\030\uffe1\001\002\000\024\010" +
    "\uffe5\012\uffe5\016\uffe5\017\uffe5\020\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\030\uffe5\001\002\000\024\010\uffe2\012\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2\030\uffe2" +
    "\001\002\000\026\010\uffe8\012\uffe8\017\uffe8\020\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\054\026\051\030\uffe8\001\002" +
    "\000\026\010\uffdf\012\uffdf\017\uffdf\020\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\030\uffdf\001\002\000\024" +
    "\010\uffe3\012\uffe3\016\uffe3\017\uffe3\020\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\030\uffe3\001\002\000\024\010\uffe4\012\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\022\uffe4\023\uffe4\024\uffe4\030" +
    "\uffe4\001\002\000\022\010\uffe9\012\uffe9\017\uffe9\020\uffe9" +
    "\022\uffe9\023\uffe9\024\uffe9\030\uffe9\001\002\000\022\010" +
    "\uffe7\012\uffe7\017\uffe7\020\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\030\uffe7\001\002\000\006\005\ufffb\006\ufffb\001\002\000" +
    "\004\016\062\001\002\000\020\010\020\012\031\020\035" +
    "\022\023\023\022\024\024\030\014\001\002\000\022\010" +
    "\020\012\031\017\064\020\035\022\023\023\022\024\024" +
    "\030\014\001\002\000\022\010\uffed\012\uffed\017\uffed\020" +
    "\uffed\022\uffed\023\uffed\024\uffed\030\uffed\001\002\000\004" +
    "\016\067\001\002\000\004\016\uffec\001\002\000\020\010" +
    "\020\012\031\020\035\022\023\023\022\024\024\030\014" +
    "\001\002\000\022\010\020\012\031\017\071\020\035\022" +
    "\023\023\022\024\024\030\014\001\002\000\022\010\uffef" +
    "\012\uffef\017\uffef\020\uffef\022\uffef\023\uffef\024\uffef\030" +
    "\uffef\001\002\000\004\016\073\001\002\000\020\010\020" +
    "\012\031\020\035\022\023\023\022\024\024\030\014\001" +
    "\002\000\022\010\020\012\031\017\075\020\035\022\023" +
    "\023\022\024\024\030\014\001\002\000\022\010\uffee\012" +
    "\uffee\017\uffee\020\uffee\022\uffee\023\uffee\024\uffee\030\uffee" +
    "\001\002\000\004\016\077\001\002\000\020\010\020\012" +
    "\031\020\035\022\023\023\022\024\024\030\014\001\002" +
    "\000\022\010\020\012\031\017\101\020\035\022\023\023" +
    "\022\024\024\030\014\001\002\000\022\010\ufff1\012\ufff1" +
    "\017\ufff1\020\ufff1\022\ufff1\023\ufff1\024\ufff1\030\ufff1\001" +
    "\002\000\004\002\000\001\002\000\004\031\104\001\002" +
    "\000\004\016\105\001\002\000\020\010\020\012\031\020" +
    "\035\022\023\023\022\024\024\030\014\001\002\000\022" +
    "\010\020\012\031\017\107\020\035\022\023\023\022\024" +
    "\024\030\014\001\002\000\004\002\ufffe\001\002\000\006" +
    "\005\ufffc\006\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\012\003\007\004\006\005\004\006\003\001" +
    "\001\000\002\001\001\000\006\003\110\006\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\027\010\015" +
    "\011\024\012\025\013\020\016\016\022\031\023\033\024" +
    "\014\025\032\026\026\027\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\075\017\047\020\054\001\001\000\002\001\001" +
    "\000\004\022\071\001\001\000\004\030\064\001\001\000" +
    "\002\001\001\000\030\007\027\010\040\012\025\013\020" +
    "\016\016\022\031\023\033\024\014\025\032\026\026\027" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\007\027\010\015\011\037\012\025\013" +
    "\020\016\016\022\031\023\033\024\014\025\032\026\026" +
    "\027\035\001\001\000\030\007\027\010\040\012\025\013" +
    "\020\016\016\022\031\023\033\024\014\025\032\026\026" +
    "\027\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\055\017\047" +
    "\020\054\021\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\056" +
    "\017\047\020\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\007\027\010" +
    "\015\011\062\012\025\013\020\016\016\022\031\023\033" +
    "\024\014\025\032\026\026\027\035\001\001\000\030\007" +
    "\027\010\040\012\025\013\020\016\016\022\031\023\033" +
    "\024\014\025\032\026\026\027\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\007\027" +
    "\010\015\011\067\012\025\013\020\016\016\022\031\023" +
    "\033\024\014\025\032\026\026\027\035\001\001\000\030" +
    "\007\027\010\040\012\025\013\020\016\016\022\031\023" +
    "\033\024\014\025\032\026\026\027\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\027\010\015\011" +
    "\073\012\025\013\020\016\016\022\031\023\033\024\014" +
    "\025\032\026\026\027\035\001\001\000\030\007\027\010" +
    "\040\012\025\013\020\016\016\022\031\023\033\024\014" +
    "\025\032\026\026\027\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\007\027\010\015\011\077\012\025" +
    "\013\020\016\016\022\031\023\033\024\014\025\032\026" +
    "\026\027\035\001\001\000\030\007\027\010\040\012\025" +
    "\013\020\016\016\022\031\023\033\024\014\025\032\026" +
    "\026\027\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\007\027\010" +
    "\015\011\105\012\025\013\020\016\016\022\031\023\033" +
    "\024\014\025\032\026\026\027\035\001\001\000\030\007" +
    "\027\010\040\012\025\013\020\016\016\022\031\023\033" +
    "\024\014\025\032\026\026\027\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/*
 * parser.cup,
 * Edited by Ian Tibbetts, Nick Aalberg and Jinghui Yu
 * Last Edit: 02/25/2014
 * Added nonterminals, grammar rules to build parse tree and AST
 */
    /** overrides done_parsing in inherited class, called when parsing finishes
      * either after accepting or because of errors
      * */
    public void done_parsing() {
		super.done_parsing();
		// if lexing and/or parsing errors then exit
		action_obj.getErrorHandler().checkErrors();
    }

    /** overrides syntax_error in inherited class and handles syntax errors 
      * @param curr current symbol from the lexer
      * */
    public void syntax_error(Symbol curr) {
		// get token value from the symbol
		Token t = (Token)curr.value;
	
		// get the error handler object
		ErrorHandler errorHandler = action_obj.getErrorHandler();

		// may want to modify and augment the code below for more
		// accurate error reporting
		errorHandler.register(errorHandler.PARSE_ERROR, action_obj.getCurrFilename(), 
			      action_obj.getCurrLineNum(), 
			      "unexpected input near '" + t.getLexeme() + "'");
    }

    /** override error_sync_size in inherited class and
      * change the minimum number of tokens to skip on an error from 3 to 2
      * @return minimum number of tokens to skip on an error
      * */
    protected int error_sync_size() {
		return 2;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {

 
    /** object for error handling */
    private ErrorHandler errorHandler = new ErrorHandler();

    /* sets the error handler */
    public ErrorHandler getErrorHandler() {
		return errorHandler;
    }

    /* returns the current line number from the scanner */
    public int getCurrLineNum() {
		return ((Lexer)parser.getScanner()).getCurrLineNum();
    }

    /* returns the current file name from the scanner */
    public String getCurrFilename() {
		return ((Lexer)parser.getScanner()).getCurrFilename();
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // constStringExpr ::= STRING_CONST 
            {
              ConstStringExpr RESULT = null;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ConstStringExpr(getCurrLineNum(),s.getAttribute()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*constStringExpr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // phraseDispatch ::= constStringExpr LPAREN RPAREN 
            {
              PhraseDispatch RESULT = null;
		ConstStringExpr s = (ConstStringExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new PhraseDispatch(getCurrLineNum(),s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*phraseDispatch*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // accidental ::= ACCIDENTAL 
            {
              Accidental RESULT = null;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Accidental(getCurrLineNum(),a.getAttribute()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*accidental*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // note ::= REST 
            {
              Note RESULT = null;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Rest(getCurrLineNum(), r.getAttribute() ); 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*note*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // note ::= NOTE 
            {
              Note RESULT = null;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Note(getCurrLineNum(),n.getAttribute()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*note*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // octaveModVal ::= OCTAVEMODVAL 
            {
              OctaveModVal RESULT = null;
		Token om = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new OctaveModVal(getCurrLineNum(),om.getAttribute()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*octaveModVal*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // octaveIntConst ::= OCTAVEINTCONST 
            {
              OctaveIntConst RESULT = null;
		Token oi = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new OctaveIntConst(getCurrLineNum(),oi.getAttribute()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*octaveIntConst*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // octaveValue ::= octaveModVal 
            {
              OctaveValue RESULT = null;
		OctaveModVal om = (OctaveModVal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (OctaveModVal)om; 
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*octaveValue*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // octaveValue ::= octaveIntConst 
            {
              OctaveValue RESULT = null;
		OctaveIntConst oi = (OctaveIntConst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (OctaveIntConst)oi; 
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*octaveValue*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // noteLiteral ::= LENGTH note 
            {
              NoteLiteral RESULT = null;
		Token len = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Note n = (Note)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new NoteLiteral(getCurrLineNum(),len.getAttribute(), n,null, null); 
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*noteLiteral*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // noteLiteral ::= LENGTH note accidental octaveValue 
            {
              NoteLiteral RESULT = null;
		Token len = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Note n = (Note)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Accidental a = (Accidental)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		OctaveValue val = (OctaveValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new NoteLiteral(getCurrLineNum(),len.getAttribute(), n,a, val); 
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*noteLiteral*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // noteLiteral ::= LENGTH note accidental 
            {
              NoteLiteral RESULT = null;
		Token len = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Note n = (Note)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Accidental a = (Accidental)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new NoteLiteral(getCurrLineNum(),len.getAttribute(), n,a, null); 
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*noteLiteral*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // noteLiteral ::= LENGTH note octaveValue 
            {
              NoteLiteral RESULT = null;
		Token len = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Note n = (Note)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		OctaveValue val = (OctaveValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new NoteLiteral(getCurrLineNum(),len.getAttribute(), n,null, val); 
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*noteLiteral*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // noteExpr ::= noteLiteral 
            {
              NoteExpr RESULT = null;
		NoteLiteral n = (NoteLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT =  (NoteLiteral)n; 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*noteExpr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // noteExpr ::= phraseDispatch 
            {
              NoteExpr RESULT = null;
		PhraseDispatch p = (PhraseDispatch)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (PhraseDispatch)p; 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*noteExpr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // volumeWord ::= VOLUMEWORD 
            {
              VolumeWord RESULT = null;
		Token vw = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new VolumeWord(getCurrLineNum(),vw.getAttribute()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*volumeWord*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tempoBlock ::= TEMPO TEMPOINTCONST LBRACE exprList RBRACE 
            {
              TempoBlock RESULT = null;
		Token tic = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TempoBlock(getCurrLineNum(), tic.getAttribute(), el); 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*tempoBlock*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instrumentBlock ::= INSTRUMENT constStringExpr LBRACE exprList RBRACE 
            {
              InstrumentBlock RESULT = null;
		ConstStringExpr s = (ConstStringExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstrumentBlock(getCurrLineNum(), s, el); 
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*instrumentBlock*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // volumeBlock ::= VOLUME volumeWord LBRACE exprList RBRACE 
            {
              VolumeBlock RESULT = null;
		VolumeWord vw = (VolumeWord)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VolumeBlock(getCurrLineNum(), vw, el); 
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*volumeBlock*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // repeatBlock ::= REPEAT LBRACE exprList RBRACE 
            {
              RepeatBlock RESULT = null;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new RepeatBlock(getCurrLineNum(), el); 
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*repeatBlock*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // octaveBlock ::= OCTAVE octaveValue LBRACE exprList RBRACE 
            {
              OctaveBlock RESULT = null;
		OctaveValue val = (OctaveValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new OctaveBlock(getCurrLineNum(),val, el); 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*octaveBlock*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // blockExpr ::= tempoBlock 
            {
              BlockExpr RESULT = null;
		TempoBlock tb = (TempoBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (TempoBlock)tb; 
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*blockExpr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // blockExpr ::= instrumentBlock 
            {
              BlockExpr RESULT = null;
		InstrumentBlock ib = (InstrumentBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (InstrumentBlock)ib; 
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*blockExpr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // blockExpr ::= repeatBlock 
            {
              BlockExpr RESULT = null;
		RepeatBlock rb = (RepeatBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (RepeatBlock)rb; 
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*blockExpr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // blockExpr ::= volumeBlock 
            {
              BlockExpr RESULT = null;
		VolumeBlock vb = (VolumeBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (VolumeBlock)vb; 
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*blockExpr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // blockExpr ::= octaveBlock 
            {
              BlockExpr RESULT = null;
		OctaveBlock ob = (OctaveBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (OctaveBlock)ob; 
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*blockExpr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= blockExpr 
            {
              Expr RESULT = null;
		BlockExpr be = (BlockExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (BlockExpr)be; 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= noteExpr 
            {
              Expr RESULT = null;
		NoteExpr ne = (NoteExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (NoteExpr)ne; 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exprList ::= exprList expr 
            {
              ExprList RESULT = null;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (ExprList)el.addElement(e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exprList*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exprList ::= expr 
            {
              ExprList RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (ExprList)(new ExprList(0)).addElement(e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*exprList*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // phrase ::= PHRASE STRING_CONST LBRACE exprList RBRACE 
            {
              Phrase RESULT = null;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Phrase(getCurrLineNum(),name.getAttribute(), el); 
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*phrase*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // phraseList ::= phraseList phrase 
            {
              PhraseList RESULT = null;
		PhraseList pl = (PhraseList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Phrase p = (Phrase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (PhraseList)pl.addElement(p); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*phraseList*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // phraseList ::= phrase 
            {
              PhraseList RESULT = null;
		Phrase p = (Phrase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (PhraseList)(new PhraseList(0)).addElement(p); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*phraseList*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // song ::= SONG STRING_CONST TEMPOINTCONST LBRACE exprList RBRACE 
            {
              Song RESULT = null;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Song(getCurrLineNum(),name.getAttribute(), t.getAttribute(), el); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*song*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // file ::= song 
            {
              File RESULT = null;
		Song s = (Song)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new File(getCurrLineNum(),null,s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*file*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= file EOF 
            {
              Object RESULT = null;
		File start_val = (File)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // file ::= phraseList song 
            {
              File RESULT = null;
		PhraseList pl = (PhraseList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Song s = (Song)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new File(getCurrLineNum(),pl, s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*file*/, RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

